package persistence.sql.ddl;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.sql.ddl.domain.Person1;
import persistence.sql.ddl.domain.Person2;
import persistence.sql.ddl.domain.Person3;
import persistence.sql.dialect.h2.H2Dialect;
import persistence.sql.dml.domain.Person;
import persistence.sql.meta.Columns;
import persistence.sql.meta.EntityMetaCreator;
import persistence.sql.meta.PrimaryKey;
import persistence.sql.meta.simple.SimpleEntityMetaCreator;

import static org.assertj.core.api.Assertions.assertThat;

class QueryBuilderTest {

    @DisplayName("요구사항1, @Id, @Entity가 존재하는 Person객체의 create ddl문을 생성한다.")
    @Test
    void persion_ddl_create1() {
        final EntityMetaCreator entityMetaCreator = SimpleEntityMetaCreator.of(Person1.class);
        final String tableName = entityMetaCreator.createTableName();
        final PrimaryKey primaryKey = entityMetaCreator.createPrimaryKey();
        final Columns columns = entityMetaCreator.createColumns();
        final DdlCreateQueryBuilder queryBuilder = new DdlCreateQueryBuilder(tableName, primaryKey, columns, new H2Dialect());
        String expectedDDL = "create table person1 (id bigint not null, age integer , name varchar(255) , primary key (id))";

        String actualDDL = queryBuilder.createDdl();

        assertThat(actualDDL).isEqualTo(expectedDDL);
    }

    @DisplayName("요구사항2, @GeneratedValue와 @Column문이 추가된 Person객체의 create ddl문을 생성한다.")
    @Test
    void persion_ddl_create2() {
        final EntityMetaCreator entityMetaCreator = SimpleEntityMetaCreator.of(Person2.class);
        final String tableName = entityMetaCreator.createTableName();
        final PrimaryKey primaryKey = entityMetaCreator.createPrimaryKey();
        final Columns columns = entityMetaCreator.createColumns();
        final DdlCreateQueryBuilder queryBuilder = new DdlCreateQueryBuilder(tableName, primaryKey, columns, new H2Dialect());
        String expectedDDL = "create table person2 (id bigint generated by default as identity, old integer , email varchar(255) not null, nick_name varchar(255) , primary key (id))";

        String actualDDL = queryBuilder.createDdl();

        assertThat(actualDDL).isEqualTo(expectedDDL);
    }

    @DisplayName("요구사항3, @Table과 @Transient이 추가된 Person객체의 create ddl문을 생성한다.")
    @Test
    void persion_ddl_create3() {
        final EntityMetaCreator entityMetaCreator = SimpleEntityMetaCreator.of(Person3.class);
        final String tableName = entityMetaCreator.createTableName();
        final PrimaryKey primaryKey = entityMetaCreator.createPrimaryKey();
        final Columns columns = entityMetaCreator.createColumns();
        final DdlCreateQueryBuilder queryBuilder = new DdlCreateQueryBuilder(tableName, primaryKey, columns, new H2Dialect());
        String expectedDDL = "create table users (id bigint generated by default as identity, old integer , email varchar(255) not null, nick_name varchar(255) , primary key (id))";

        String actualDDL = queryBuilder.createDdl();

        assertThat(actualDDL).isEqualTo(expectedDDL);
    }

    @DisplayName("요구사항4, Person객체의 drop ddl문을 생성한다.")
    @Test
    void persion_ddl_drop() {
        final EntityMetaCreator entityMetaCreator = SimpleEntityMetaCreator.of(Person.class);
        final String tableName = entityMetaCreator.createTableName();
        final DdlDropQueryBuilder queryBuilder = new DdlDropQueryBuilder(tableName);
        String expectedDDL = "drop table if exists users CASCADE";

        String actualDDL = queryBuilder.dropDdl();

        assertThat(actualDDL).isEqualTo(expectedDDL);
    }
}