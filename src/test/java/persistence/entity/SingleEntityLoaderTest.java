package persistence.entity;

import jdbc.JdbcTemplate;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.sql.JdbcServerTest;
import persistence.sql.TestJdbcServerExtension;
import persistence.sql.ddl.PersonV3;
import persistence.sql.dialect.Dialect;
import persistence.sql.dialect.H2Dialect;
import persistence.sql.dml.DefaultDmlQueryBuilder;
import persistence.sql.mapping.TableBinder;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@JdbcServerTest
class SingleEntityLoaderTest {

    private static JdbcTemplate jdbcTemplate;

    private final TableBinder tableBinder = new TableBinder();
    private final Dialect dialect = new H2Dialect();
    private final DefaultDmlQueryBuilder dmlQueryBuilder = new DefaultDmlQueryBuilder(dialect);

    private final EntityLoader entityLoader = new SingleEntityLoader(tableBinder, dmlQueryBuilder, jdbcTemplate);

    @BeforeAll
    static void beforeAll() {
        jdbcTemplate = TestJdbcServerExtension.getJdbcTemplate();

        final String ddl = "create table users (\n" +
                "    id bigint generated by default as identity,\n" +
                "    nick_name varchar(255),\n" +
                "    old integer,\n" +
                "    email varchar(255) not null,\n" +
                "    primary key (id)\n" +
                ")";
        jdbcTemplate.execute(ddl);
    }

    @AfterAll
    static void afterAll() {
        List<String> tableNames = jdbcTemplate
                .query("SELECT table_name FROM information_schema.tables WHERE table_schema='PUBLIC'", resultSet -> resultSet.getString("table_name"));

        for (String tableName : tableNames) {
            jdbcTemplate.execute("DROP TABLE IF EXISTS " + tableName + " CASCADE");
        }
    }

    @DisplayName("클래스 정보로 엔티티를 조회한다.")
    @Test
    public void load() throws Exception {
        // given
        final Class<PersonV3> clazz = PersonV3.class;
        final long key = 1L;

        final String name = "name";
        final int age = 1;
        final String email = "email@domain.com";
        final String dml = "insert\n" +
                "into\n" +
                "    users\n" +
                "    (nick_name, old, email, id)\n" +
                "values\n" +
                "    ('" + name + "', " + age + ", '" + email + "', default)";

        jdbcTemplate.execute(dml);

        // when
        final PersonV3 entity = entityLoader.load(clazz, key);

        // then
        assertThat(entity).isNotNull()
                .extracting("id", "name", "age", "email")
                .contains(key, name, age, email);
    }

}
