package persistence.repository;

import database.DatabaseServer;
import database.H2;
import entity.Person;
import jdbc.JdbcTemplate;
import org.junit.jupiter.api.*;
import persistence.entity.*;
import persistence.sql.Query;
import persistence.sql.dialect.h2.H2Dialect;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomJpaRepositoryTest {

    private static DatabaseServer server;
    private static JdbcTemplate jdbcTemplate;
    private static final Query QUERY = new Query(new H2Dialect());
    private EntityManager entityManager;

    @BeforeAll
    static void beforeAll() throws Exception {
        try {
            server = new H2();
            server.start();
            jdbcTemplate = new JdbcTemplate(server.getConnection());
        } catch (Exception e) {
            throw new Exception(e);
        }
    }

    @AfterAll
    static void afterAll() {
        server.stop();
    }

    @BeforeEach
    void beforeEach() {
        jdbcTemplate.execute("create table users (id bigint generated by default as identity, nick_name varchar(255), old integer, email varchar(255) not null, primary key (id))");
        jdbcTemplate.execute("insert into users (id, nick_name, old, email) values (default, 'test1', 10, 'test1@gmail.com')");
        entityManager = new SimpleEntityManager(new EntityPersister(QUERY, jdbcTemplate), new EntityLoader(QUERY, jdbcTemplate), new SimplePersistenceContext());
    }

    @AfterEach
    void afterEach() {
        jdbcTemplate.execute("drop table if exists users CASCADE");
    }

    @Test
    void dirtyCheckTest() {
        CustomJpaRepository<Person, Long> repository = new CustomJpaRepository<>(entityManager);
        Person updated = new Person(1L, "test2", 11, "test2@gmail.com", 0);
        repository.save(updated);

        assertThat(entityManager.find(Person.class, 1L)).isEqualTo(updated);
    }

}
